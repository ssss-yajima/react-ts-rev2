{"version":3,"sources":["components/TaskItem.tsx","components/TaskList.tsx","services/api.ts","actions/taskList.ts","containers/TaskList.tsx","components/Timer.tsx","containers/Timer.tsx","App.tsx","serviceWorker.ts","reducers/taskList.ts","index.tsx"],"names":["TaskItem","task","onClickToggle","onClickRemove","onClick","selected","ListItem","ListItemIcon","aria-label","isDone","ListItemText","primary","title","TaskList","tasks","add","set","remove","toggle","useState","setTitle","selectedId","setSelectedId","useEffect","a","async","fetch","then","res","json","resJson","fetchTasks","fetchedTasks","className","List","component","map","key","id","style","paddingLeft","paddingRight","Grid","container","spacing","item","sm","TextField","variant","size","fullWidth","label","value","onChange","e","target","Button","newTask","Date","getTime","toString","disabled","ADD","SET","REMOVE","TOGGLE","connect","state","dispatch","type","payload","TimerComponents","isRunning","timeLeft","start","stop","startButton","stopButton","TimerContainer","setTimeLeft","setIsRunning","tick","prevTime","console","log","timerId","clear","clearInterval","setInterval","Timer","App","Helmet","htmlAttributes","lang","Container","maxWidth","AppBar","position","Toolbar","Typography","Paper","path","exact","to","Boolean","window","location","hostname","match","initialState","filter","x","toggledTask","taskListReducer","action","composeReduxDevToolsEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f19a374.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Task } from '../services/task';\nimport { Grid } from '@material-ui/core';\n\nexport interface TaskProps {\n  task: Task;\n  onClickToggle: (task: Task) => void;\n  onClickRemove?: (task: Task) => void;\n  onClick: () => void;\n  selected: boolean;\n}\n\nconst TaskItem: FC<TaskProps> = ({\n  task,\n  onClickToggle = () => undefined,\n  onClickRemove = () => undefined,\n  onClick = () => undefined,\n  selected = false,\n}) => {\n  return (\n    <div>\n      <ListItem selected={selected}>\n        <ListItemIcon aria-label=\"toggle\" onClick={() => onClickToggle(task)}>\n          {task.isDone ? (\n            <CheckBoxOutlinedIcon />\n          ) : (\n            <CheckBoxOutlineBlankOutlinedIcon />\n          )}\n        </ListItemIcon>\n        <ListItemText primary={task.title} onClick={() => onClick()} />\n\n        <ListItemIcon aria-label=\"delete\" onClick={() => onClickRemove(task)}>\n          <DeleteIcon />\n        </ListItemIcon>\n      </ListItem>\n    </div>\n  );\n};\n\nexport default TaskItem;\n","import React, { FC, useState, useEffect } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport TaskItem from './TaskItem';\nimport { Task } from '../services/task';\nimport { fetchTasks } from '../services/api';\nimport { Container, Grid } from '@material-ui/core';\n\nexport interface TaskListProps {\n  tasks?: Task[];\n  add?: (task: Task) => void;\n  set?: (tasks: Task[]) => void;\n  remove?: (task: Task) => void;\n  toggle?: (task: Task) => void;\n}\n\nconst TaskList: FC<TaskListProps> = ({\n  tasks = [],\n  add = () => undefined,\n  set = () => undefined,\n  remove = () => undefined,\n  toggle = () => undefined,\n}) => {\n  // State\n  const [title, setTitle] = useState('');\n  const [selectedId, setSelectedId] = useState('');\n\n  // Add a new task\n  const onClickAdd = () => {\n    const newTask: Task = {\n      id: new Date().getTime().toString(), // FIXME\n      title,\n      isDone: false,\n    };\n    add(newTask);\n    setTitle(''); // Clear input box\n  };\n\n  // Lifecycle\n  useEffect(() => {\n    // Fetch tasks from API on mount\n    fetchTasks().then(fetchedTasks => set(fetchedTasks));\n  }, [set]);\n\n  return (\n    <>\n      <div className=\"TaskList\">\n        <List component=\"nav\" aria-label=\"taskList\">\n          {tasks.map(task => (\n            <TaskItem\n              task={task}\n              key={task.id}\n              onClickToggle={() => toggle(task)}\n              onClickRemove={() => remove(task)}\n              onClick={() => setSelectedId(task.id)}\n              selected={task.id === selectedId}\n            />\n          ))}\n        </List>\n      </div>\n      <div\n        className=\"NewTaskForm\"\n        style={{ paddingLeft: 10, paddingRight: 10 }}\n      >\n        <Grid container spacing={1}>\n          <Grid item sm={10}>\n            <TextField\n              id=\"outlined-basic\"\n              variant=\"outlined\"\n              size=\"small\"\n              fullWidth\n              label=\"タスク名を入力...\"\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n            />\n          </Grid>\n          <Grid item sm={2}>\n            <Button\n              variant=\"contained\"\n              onClick={onClickAdd}\n              fullWidth\n              disabled={!title}\n            >\n              Add\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import { Task } from './task';\n\nconst URL = 'http://localhost:3000/tasks';\n\nexport const fetchTasks = async () => {\n  let tasks: Task[] = [];\n  await fetch(URL)\n    .then(res => res.json())\n    .then(resJson => {\n      tasks = resJson;\n    });\n\n  return tasks;\n};\n","import { Task } from '../services/task';\n\nexport const ADD = 'TASKLIST/ADD';\nexport const SET = 'TASKLIST/SET';\nexport const REMOVE = 'TASKLIST\b/REMOVE';\nexport const TOGGLE = 'TASKLIST/TOGGLE';\n\n// Add a new task\nexport const add = (task: Task) => ({\n  type: ADD as typeof ADD,\n  payload: { task },\n});\n\n// Set taks\nexport const set = (tasks: Task[]) => ({\n  type: SET as typeof SET,\n  payload: { tasks },\n});\n\n// Delete a task\nexport const remove = (task: Task) => ({\n  type: REMOVE as typeof REMOVE,\n  payload: { task },\n});\n// Toggle tasks isDone status\nexport const toggle = (task: Task) => ({\n  type: TOGGLE as typeof TOGGLE,\n  payload: { task },\n});\n\nexport type TaskListAction =\n  | ReturnType<typeof add>\n  | ReturnType<typeof remove>\n  | ReturnType<typeof toggle>\n  | ReturnType<typeof set>;\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport TaskList from '../components/TaskList';\nimport { TaskListState } from '../reducers/taskList';\nimport { Task } from '../services/task';\nimport { add, toggle, remove, set } from '../actions/taskList';\n\ninterface StateProps {\n  tasks: Task[];\n}\n\ninterface DispatchProps {\n  add: (task: Task) => void;\n  set: (tasks: Task[]) => void;\n  remove: (task: Task) => void;\n  toggle: (task: Task) => void;\n}\n\nconst mapStateToProps = (state: TaskListState): StateProps => ({\n  tasks: state.tasks,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  add: title => dispatch(add(title)),\n  set: tasks => dispatch(set(tasks)),\n  remove: task => dispatch(remove(task)),\n  toggle: task => dispatch(toggle(task)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\n","import React, { FC, useState, useEffect } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nexport interface TimerProps {\n  isRunning?: boolean;\n  timeLeft?: number;\n  start?: () => void;\n  stop?: () => void;\n}\n\nconst DEFAULT_TIME = 5;\n\nconst TimerComponents: FC<TimerProps> = ({\n  isRunning = false,\n  timeLeft = DEFAULT_TIME,\n  start,\n  stop,\n}) => {\n  // State\n\n  const startButton = (\n    <Button variant=\"contained\" onClick={start}>\n      Start\n    </Button>\n  );\n\n  const stopButton = (\n    <Button variant=\"contained\" onClick={stop}>\n      Stop\n    </Button>\n  );\n\n  return (\n    <>\n      <h2>Timer</h2>\n      <TextField\n        id=\"outlined-basic\"\n        variant=\"outlined\"\n        size=\"small\"\n        value={timeLeft}\n      />\n      {isRunning ? stopButton : startButton}\n    </>\n  );\n};\n\nexport default TimerComponents;\n","import React, { FC, useEffect, useState } from 'react';\nimport TimerComponents from '../components/Timer';\n\nconst TimerContainer: FC = () => {\n  const LIMIT = 3;\n  const [timeLeft, setTimeLeft] = useState(LIMIT);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const start = () => {\n    setIsRunning(true);\n  };\n  const stop = () => {\n    setIsRunning(false);\n  };\n\n  const tick = () => {\n    // FIXME fixed time limit\n    setTimeLeft(prevTime => (prevTime === 0 ? 0 : prevTime - 1));\n  };\n  useEffect(() => {\n    console.log(timeLeft);\n    let timerId: NodeJS.Timer | null = null;\n    const clear = () => {\n      if (timerId) {\n        clearInterval(timerId);\n      }\n    };\n    if (isRunning && timeLeft >= 0) {\n      timerId = setInterval(tick, 1000);\n    } else {\n      clear();\n      setTimeLeft(LIMIT);\n    }\n\n    return () => clear();\n  }, [isRunning, timeLeft]);\n\n  return (\n    <TimerComponents\n      timeLeft={timeLeft}\n      start={start}\n      stop={stop}\n      isRunning={isRunning}\n    />\n  );\n};\nexport default TimerContainer;\n","import React, { FC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TaskList from './containers/TaskList';\nimport Timer from './containers/Timer';\nimport Container from '@material-ui/core/Container';\n\nconst title = 'ToDo List';\n\nconst App: FC = () => (\n  <>\n    <Helmet htmlAttributes={{ lang: 'ja' }}>\n      <title>{title}</title>\n    </Helmet>\n    <Container maxWidth=\"sm\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">{title}</Typography>\n        </Toolbar>\n      </AppBar>\n      <Paper>\n        <Switch>\n          <Route path=\"/\" exact component={TaskList} />\n          <Route path=\"/timer\" component={Timer} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Paper>\n    </Container>\n  </>\n);\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* eslint func-style: 'off' */\n/* eslint no-param-reassign: 'off' */\n/* eslint no-use-before-define: 'off' */\n/* eslint '@typescript-eslint/no-use-before-define': 'off' */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer } from 'redux';\nimport { Task } from '../services/task';\nimport { TaskListAction, ADD, REMOVE, TOGGLE, SET } from '../actions/taskList';\n\nexport interface TaskListState {\n  tasks: Task[];\n}\nexport const initialState: TaskListState = { tasks: [] };\n\n// 選択されたタスクを削除\nconst remove = (tasks: Task[], task: Task): Task[] =>\n  tasks.filter(x => x !== task);\n\n// 選択されたタスクの完了状態を反転\nfunction toggle(tasks: Task[], task: Task): Task[] {\n  const toggledTask = task;\n  toggledTask.isDone = !toggledTask.isDone;\n  const newTasks = tasks.map(x => (x.id === task.id ? toggledTask : x));\n\n  return newTasks;\n}\n\nconst taskListReducer: Reducer<TaskListState, TaskListAction> = (\n  state: TaskListState = initialState,\n  action: TaskListAction,\n): TaskListState => {\n  switch (action.type) {\n    case ADD:\n      return {\n        ...state,\n        tasks: [...state.tasks, action.payload.task],\n      };\n    case SET:\n      return {\n        ...state,\n        tasks: action.payload.tasks,\n      };\n    case REMOVE:\n      return {\n        ...state,\n        tasks: remove(state.tasks, action.payload.task),\n      };\n    case TOGGLE:\n      return {\n        ...state,\n        tasks: toggle(state.tasks, action.payload.task),\n      };\n    default: {\n      // const _: never = action;\n      return state;\n    }\n  }\n};\n\nexport default taskListReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\n\nimport App from './App';\n// import rootSaga from './sagas/github';\nimport * as serviceWorker from './serviceWorker';\nimport taskListReducer from './reducers/taskList';\n\n// import './index.css';\n\n// const sagaMiddleWare = createSagaMiddleware();\n// const store = createStore(reducer, applyMiddleware(sagaMiddleWare));\n\ninterface ExtendedWindow extends Window {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n}\ndeclare var window: ExtendedWindow;\nconst composeReduxDevToolsEnhancers =\n  (typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst store = createStore(\n  taskListReducer,\n  composeReduxDevToolsEnhancers(applyMiddleware()),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root') as HTMLElement,\n);\n\nserviceWorker.unregister();\n// sagaMiddleWare.run(rootSaga);\n"],"sourceRoot":""}